pipeline {
    agent any
    parameters {
        choice choices: ['~~~~~~ To select group', '[test] - - - group'], name: 'group'
        choice choices: ['~~~~~~ Playbook file to run', 'eli1.yaml - - - for testing', 'eli2.yaml - - -  WARNING Makes changes on machine', ], name: 'playbook'
    }


   stages{
        stage('Functions'){
            steps{
                sh '''
                    . ./functions.sh
                    rm -f $vars_file $out_file
                    touch $vars_file $out_file
            '''
            }
        }
        stage('Prepare yaml') {
            steps {
                sh '''
                . ./functions.sh
               
                
                header "group" "playbook"
                
                get_input group 1 "You need to choose 'group' other then '~~~~~~'"
                set_var group
                get_input playbook 1 "You need to choose 'palybook' other then '~~~~~~'"
                set_var playbook
                get_vars
                
                echo "file_yaml=$playbook" >> $vars_file
                get_vars
                
                show_file $vars_file
                check_vars_file
                

                sed -i "s/hosts: ALL_group/hosts: $group/" $playbook
                
                show_file $playbook $out_file
                
                check_vars_file $vars_file
                show_file $vars_file
            '''
        }
    }
    stage('Run ansible yaml') {
        steps {
            sh '''
                . ./functions.sh
                get_vars
                echo > Ansible_result
                
                ansible-playbook $file_yaml | tee  Ansible_result
                show_file Ansible_result
                show_file Ansible_result >> $out_file
                '''
            script{ 
                    def script_output= sh(returnStdout: true, script: ''' . ./functions.sh; get_vars; echo $out_file ''')
                    out_file  = script_output.trim()
                }   
            }
        }
        stage('Check result playbook') {
            steps {
                sh '''
                . ./functions.sh
                get_vars
            
                err=$(grep 'failed=' $out_file | grep -v 'failed=0') || true
                if [ -z "$err" ];then
                    msg "No errors as been found"
                    echo "status=no_error" >> $vars_file
                else
                   msg "Errors as been found please check"
                   sed -i '1s/^/***ERROR in playbook. Please check/'  $out_file
                   echo "status=error" >> $vars_file
                fi
                
                get_vars
            '''
            }
        }
        stage('Download recap file') {
            steps {
                archiveArtifacts artifacts: "$out_file"
            }
        }
        stage('Check error') {
            steps {
                sh '''
                . ./functions.sh
                get_vars
            
            if [ $status == error ]; then
                msg "Errors as been found"
                grep 'failed=' $out_file
                exit 1
            fi
            '''
            }
        }
    }
}
